#version 100

precision mediump int;
precision mediump float;

uniform vec4 lightDiffuse;
uniform vec4 lightSpecular;
uniform float exponent;
uniform vec4 lightPosition;
uniform vec3 eyePosition;
uniform vec4 attenuation;
uniform float splatScaleX;
uniform float splatScaleZ;

uniform sampler2D covMap1;
uniform sampler2D covMap2;
uniform sampler2D covMap3;
uniform sampler2D splat1;
uniform sampler2D splat2;
uniform sampler2D splat3;
uniform sampler2D splat4;
uniform sampler2D splat5;
uniform sampler2D splat6;
uniform sampler2D splat7;
uniform sampler2D splat8;
uniform sampler2D splat9;
uniform sampler2D colourMap;
uniform sampler2D lightMap;
uniform sampler2D normalMap;

varying vec4 oColor0;
varying vec2 uv;
varying vec4 oPosition;

vec4 expand(vec4 v)
{ 
	return v * 2.0 - 1.0;
}

vec4 lit(float NdotL, float NdotH, float m) {
 
  float ambient = 1.0;
  float diffuse = max(NdotL, 0.0);
  float specular = step(0.0, NdotL) * max(NdotH * m, 0.0);
 
  return vec4(ambient, diffuse, specular, 1.0);
}

void main()
{
	vec2 globalTexCoord = uv;

//    vec4 c = texture2D(colourMap, globalTexCoord);
	// add global Lightmap
	vec4 c = texture2D(lightMap, globalTexCoord);

	// lighting
	vec3 normal = expand(texture2D(normalMap, globalTexCoord)).rgb;
	normal = normalize(normal);

	vec3 lightDir = lightPosition.xyz - (oPosition.xyz * lightPosition.w);
	lightDir = normalize(lightDir); 
	
	float distance = length(lightDir);
	float lumination = 1.0 / (attenuation.y + attenuation.z * distance + attenuation.w * distance * distance);

	lumination = min(lumination, 1.0);
    
	vec3 eyeDir = normalize(eyePosition - oPosition.xyz);
	eyeDir = normalize(eyeDir);

	vec3 halfAngle = normalize(lightDir + eyeDir);

	float NdotL = dot(lightDir, normal);
	float NdotH = dot(halfAngle, normal);
	vec4 Lit = lit(NdotL, NdotH, exponent);

    c *= oColor0;
//	c *= oColor0 + lumination * (lightDiffuse * Lit.y + lightSpecular * Lit.z * Lit.y);

    gl_FragColor = texture2D(colourMap, globalTexCoord);
}

